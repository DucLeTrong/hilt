version: '3'

includes:
  airflow:
    taskfile: ./computation/airflow/Taskfile.yml
    dir: ./compute/airflow
  debezium:
    taskfile: ./computation/debezium/Taskfile.yml
    dir: ./compute/debezium
  nifi:
    taskfile: ./computation/nifi/Taskfile.yml
    dir: ./compute/nifi
  spark:
    taskfile: ./computation/spark/Taskfile.yml
    dir: ./compute/spark
  trino:
    taskfile: ./computation/trino/Taskfile.yml
    dir: ./compute/trino

  grafana:
    taskfile: ./monitoring/grafana/Taskfile.yml
    dir: ./serving/grafana
  prometheus:
    taskfile: ./monitoring/prometheus/Taskfile.yml
    dir: ./serving/prometheus

  hive:
    taskfile: ./warehouse/hive/Taskfile.yml
    dir: ./serving/hive

  keycloak:
    taskfile: ./security/keycloak/Taskfile.yml
    dir: ./serving/keycloak

  hadoop:
    taskfile: ./storage/hadoop/Taskfile.yml
    dir: ./storage/hadoop
  kafka:
    taskfile: ./storage/kafka
    dir: ./storage/kafka
  minio:
    taskfile: ./storage/minio/Taskfile.yml
    dir: ./storage/minio
  zookeeper:
    taskfile: ./storage/zookeeper/Taskfile.yml
    dir: ./storage/zookeeper

  mongo:
    taskfile: ./databases/mongo/Taskfile.yml
    dir: ./storage/mongo
  mysql:
    taskfile: ./databases/mysql/Taskfile.yml
    dir: ./storage/mysql
  postgresql:
    taskfile: ./databases/postgresql/Taskfile.yml
    dir: ./storage/postgresql
  rabbitmq:
    taskfile: ./databases/rabbitmq/Taskfile.yml
    dir: ./storage/rabbitmq
  redis:
    taskfile: ./databases/redis/Taskfile.yml
    dir: ./storage/rabbitmq

vars:
  BASE_VERSION: '{{.BASE_VERSION | default "0.1.0"}}'
  DEFAULT_NETWORK: '{{.DEFAULT_NETWORK | default "local_net"}}'

tasks:

  build-base:
    dir: ./base
    cmds:
    - docker build -t sondn1/base:{{ .BASE_VERSION }} .
    # - docker push sondn1/base:{{ .BASE_VERSION }}

  push-base:
    cmds:
    - docker push sondn1/base:{{ .BASE_VERSION }}

  stop-containers:
    cmds:
    - docker stop $(docker ps -aq)

  rm-stopped-containers:
    cmds:
    - docker rm $(docker ps -aq)

  force-rm-containers:
    cmds:
    - task: stop-containers
    - docker rm $(docker ps -aq)

  create-local-network:
    cmds:
    - docker network create {{ .DEFAULT_NETWORK }}

  clear-volumes:
    cmds:
    - docker volume rm $(docker volume ls -q)
