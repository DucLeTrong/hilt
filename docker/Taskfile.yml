version: '3'

includes:

  # Base
  base:
    taskfile: ./base/Taskfile.yml
    dir: ./base

  # BI
  superset:
    taskfile: ./bi/superset/Taskfile.yml
    dir: ./bi/superset

  # Computation
  airflow:
    taskfile: ./computation/airflow/Taskfile.yml
    dir: ./computation/airflow
  debezium:
    taskfile: ./computation/debezium/Taskfile.yml
    dir: ./computation/debezium
  nifi:
    taskfile: ./computation/nifi/Taskfile.yml
    dir: ./computation/nifi
  spark:
    taskfile: ./computation/spark/Taskfile.yml
    dir: ./computation/spark
  trino:
    taskfile: ./computation/trino/Taskfile.yml
    dir: ./computation/trino

  # Databases
  mongo:
    taskfile: ./databases/mongo/Taskfile.yml
    dir: ./databases/mongo
  mysql:
    taskfile: ./databases/mysql/Taskfile.yml
    dir: ./databases/mysql
  postgresql:
    taskfile: ./databases/postgresql/Taskfile.yml
    dir: ./databases/postgresql
  rabbitmq:
    taskfile: ./databases/rabbitmq/Taskfile.yml
    dir: ./databases/rabbitmq
  redis:
    taskfile: ./databases/redis/Taskfile.yml
    dir: ./databases/redis

  # Monitoring
  grafana:
    taskfile: ./monitoring/grafana/Taskfile.yml
    dir: ./monitoring/grafana
  prometheus:
    taskfile: ./monitoring/prometheus/Taskfile.yml
    dir: ./monitoring/prometheus

  # Security
  keycloak:
    taskfile: ./security/keycloak/Taskfile.yml
    dir: ./security/keycloak
  vault:
    taskfile: ./security/vault/Taskfile.yml
    dir: ./security/vault

  # Storage
  hadoop:
    taskfile: ./storage/hadoop/Taskfile.yml
    dir: ./storage/hadoop
  kafka:
    taskfile: ./storage/kafka
    dir: ./storage/kafka
  minio:
    taskfile: ./storage/minio/Taskfile.yml
    dir: ./storage/minio
  zookeeper:
    taskfile: ./storage/zookeeper/Taskfile.yml
    dir: ./storage/zookeeper

  # Warehouse
  hive:
    taskfile: ./warehouse/hive/Taskfile.yml
    dir: ./warehouse/hive

tasks:

  stop-containers:
    cmds:
    - docker stop $(docker ps -aq)

  rm-stopped-containers:
    cmds:
    - docker rm $(docker ps -aq)

  rm-containers:
    cmds:
    - task: stop-containers
    - docker rm $(docker ps -aq)

  create-local-network:
    env:
      DEFAULT_NETWORK: '{{.DEFAULT_NETWORK | default "local"}}'
    cmds:
    - docker network create $DEFAULT_NETWORK

  clear-volumes:
    cmds:
    - docker volume rm $(docker volume ls -q)

  prune:
    cmds:
    - docker system prune -af
