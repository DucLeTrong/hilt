version: '3'

includes:
  airflow:
    taskfile: ./compute/airflow/Taskfile.yml
    dir: ./compute/airflow
  debezium: 
    taskfile: ./compute/debezium/Taskfile.yml
    dir: ./compute/debezium
  nifi: 
    taskfile: ./compute/nifi/Taskfile.yml
    dir: ./compute/nifi
  spark: 
    taskfile: ./compute/spark/Taskfile.yml
    dir: ./compute/spark
  trino: 
    taskfile: ./compute/trino/Taskfile.yml
    dir: ./compute/trino
  grafana:
    taskfile: ./serving/grafana/Taskfile.yml
    dir: ./serving/grafana
  hive: 
    taskfile: ./serving/hive/Taskfile.yml
    dir: ./serving/hive
  keycloak: 
    taskfile: ./serving/keycloak/Taskfile.yml
    dir: ./serving/keycloak
  prometheus: 
    taskfile: ./serving/prometheus/Taskfile.yml
    dir: ./serving/prometheus

  hadoop: 
    taskfile: ./storage/hadoop/Taskfile.yml
    dir: ./storage/hadoop
  kafka: 
    taskfile: ./storage/kafka
    dir: ./storage/kafka
  minio: 
    taskfile: ./storage/minio/Taskfile.yml
    dir: ./storage/minio
  mongo: 
    taskfile: ./storage/mongo/Taskfile.yml
    dir: ./storage/mongo
  mysql: 
    taskfile: ./storage/mysql/Taskfile.yml
    dir: ./storage/mysql
  postgresql: 
    taskfile: ./storage/postgresql/Taskfile.yml
    dir: ./storage/postgresql
  rabbitmq: 
    taskfile: ./storage/rabbitmq/Taskfile.yml
    dir: ./storage/rabbitmq
  redis: 
    taskfile: ./storage/redis/Taskfile.yml
    dir: ./storage/rabbitmq
  zookeeper: 
    taskfile: ./storage/zookeeper/Taskfile.yml
    dir: ./storage/zookeeper

vars:
  BASE_VERSION: '{{.BASE_VERSION | default "0.1.0"}}'
  DEFAULT_NETWORK: '{{.DEFAULT_NETWORK | default "local_net"}}'

tasks:

  build-base:
    cmds:
    - docker build -t sondn1/base:{{ .BASE_VERSION }} .
    # - docker push sondn1/base:{{ .BASE_VERSION }}

  stop-containers:
    cmds:
    - docker stop $(docker ps -aq)

  rm-stopped-containers:
    cmds:
    - docker rm $(docker ps -aq)

  force-rm-containers:
    cmds:
    - task: stop-containers
    - docker rm $(docker ps -aq)

  create-local-network:
    cmds:
    - docker network create {{ .DEFAULT_NETWORK }}

  clear-volumes:
    cmds:
    - docker volume rm $(docker volume ls -q)
